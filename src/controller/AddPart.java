package controller;

/**
 * @author Lynn Weidman
 */

import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;
import model.InHouse;
import model.Inventory;
import model.Outsourced;
import model.Part;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

/**
 * A class that allows UI to add new parts. The Part Id is automatically generated and not editable.
 * */
public class AddPart implements Initializable {

    public RadioButton inHouseRadio;
    public RadioButton outSourcedRadio;
    public Label machIdCompanyName;
    public Button partSaveBtn;
    public TextField addPartId;
    public TextArea addPartName;
    public TextArea addPartInv;
    public TextArea addPartPriceCost;
    public TextArea addPartMax;
    public TextArea addPartMin;
    public TextArea addPartMachineId;


    /**
     * Initializes controller and sets the autogenerated Part Id in the Add Part screen.
     * @param url- The location used to resolve relative paths for the root object, or null if the location is not known.
     * @param resourceBundle- The resources used to localize the root object, or null if the root object was not localized.
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        addPartId.setText(String.valueOf(Inventory.getNextPartId()));

    }

    /**
     * Returns to the Main Screen.
     * @param actionEvent- event by pressing the button.
     */
    public void onCancel(ActionEvent actionEvent) throws IOException {

        Parent root = FXMLLoader.load(getClass().getResource("/view/MainScreen.fxml"));
        Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root, 900, 600);
        stage.setTitle("Main Screen");
        stage.setScene(scene);
        stage.show();
    }

    /**
     * Sets the text to "MachineId".
     * @param actionEvent- event by pressing the button.
     */
    public void onInHouseRadio(ActionEvent actionEvent) {
        machIdCompanyName.setText("MachineId");
    }

    /**
     * Sets the text to "Company Name".
     * @param actionEvent- event by pressing the button.
     */
    public void onOutSourcedRadio(ActionEvent actionEvent) {
        machIdCompanyName.setText("Company Name");

    }

    /**
     * Saves the UI and adds a new part to Inventory. Displays an ERROR if a field is entered incorrectly.
     * Returns to the Main Screen on save.
     * @param actionEvent- event by pressing the button.
     */
    public void onPartSaveBtn(ActionEvent actionEvent) throws IOException {

        try {
            String name = addPartName.getText();
            double price = Double.parseDouble(addPartPriceCost.getText());
            int stock = Integer.parseInt(addPartInv.getText());
            int min = Integer.parseInt(addPartMin.getText());
            int max = Integer.parseInt(addPartMax.getText());

        if (name.isEmpty()) {
            Alert nameField = new Alert(Alert.AlertType.ERROR);
            nameField.setTitle("ERROR");
            nameField.setContentText("Name cannot be empty");
            nameField.showAndWait();
            return;
        }

        if (max < min) {
            Alert minimum = new Alert(Alert.AlertType.ERROR);
            minimum.setTitle("ERROR");
            minimum.setContentText("Maximum cannot be less than minimum");
            minimum.showAndWait();
            return;
        }

        if (stock < min || stock > max) {
            Alert inventory = new Alert(Alert.AlertType.ERROR);
            inventory.setTitle("ERROR");
            inventory.setContentText("Inventory level cannot be below the minimum or above the maximum allowed.");
            inventory.showAndWait();
            return;
        }


        if (inHouseRadio.isSelected()) {
            int id = Integer.parseInt(addPartId.getText());
            int machineId = Integer.parseInt(addPartMachineId.getText());
            Inventory.addPart(new InHouse(id, name, price, stock, min, max, machineId));

        }
        if (outSourcedRadio.isSelected()) {
            int id = Integer.parseInt(addPartId.getText());
            String companyName = addPartMachineId.getText();
            Inventory.addPart(new Outsourced(id, name, price, stock, min, max, companyName));

        }

        Parent root = FXMLLoader.load(getClass().getResource("/view/MainScreen.fxml"));
        Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root, 900, 600);
        stage.setTitle("Main Screen");
        stage.setScene(scene);
        stage.show();

    } catch (Exception e) {
        Alert invalidEntry = new Alert(Alert.AlertType.ERROR);
        invalidEntry.setTitle("ERROR");
        invalidEntry.setContentText("There is an invalid entry");
        invalidEntry.showAndWait();

        }
    }
}


